# Generated by Django 4.0.6 on 2022-07-24 15:08

import ckeditor.fields
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import filer.fields.file
import taggit.managers


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('filer', '0015_alter_file_owner_alter_file_polymorphic_ctype_and_more'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('taggit', '0005_auto_20220424_2025'),
    ]

    operations = [
        migrations.CreateModel(
            name='TbContentItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bContentPublish', models.BooleanField(default=True, help_text='Опубликовано или нет', verbose_name='Опубликовано')),
                ('szContentTitle', models.CharField(help_text='Заголовок контента', max_length=255, verbose_name='Заголовок')),
                ('szContentText', ckeditor.fields.RichTextField(default='', help_text='Содержание <b>БЕЗ АНОНСА</b> <small>(допустим HTML-код, будет обработан типографом, если его включить)</small>', verbose_name='Содержание')),
                ('szContentSlug', models.SlugField(help_text='Слаг  (транслитерация) контента', max_length=255, verbose_name='slud')),
                ('bContentTypograf', models.BooleanField(default=False, help_text='Обработать через <a href="https://www.typograf.ru" target="_blank">Типограф 2.0</a>. Он умеет:<br />&laquo;приклеивает&raquo; союзы, поддерживает неразрывные конструкции, замена тире, перобразует кавычки и дефисы, расставляет &laquo;мягкие переносы&raquo; в словах длиннее 12 символов, убирает &laquo;вдовы&raquo; &laquo;сироты&raquo; (кроме заголовков), расставляет абзацы (кроме заголовков), расшифровывает аббревиатуры (те, что знает и кроме заголовков), висячая пунктуация тоже поддерживается и многое другое.</small>', verbose_name='Типографировать')),
                ('dtContentCreate', models.DateTimeField(auto_now_add=True, help_text='Дата создания контента', verbose_name='Дата создания')),
                ('dtContentTimeStamp', models.DateTimeField(auto_now=True, verbose_name='Штамп времени')),
                ('kContentItemEdited', models.ForeignKey(blank=True, default=None, help_text='Этот контент образовал от контент-родителя', null=True, on_delete=django.db.models.deletion.SET_NULL, to='web.tbcontentitem', verbose_name='Контент-родитель')),
                ('kUser', models.ForeignKey(blank=True, default=None, help_text='Пользователь, который добавил контент', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': '[…Контент]',
                'verbose_name_plural': '[…Контент]',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='RuTag',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('taggit.tag',),
        ),
        migrations.CreateModel(
            name='RuTaggedItem',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('taggit.taggeditem',),
        ),
        migrations.CreateModel(
            name='TbImage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bImagePublish', models.BooleanField(default=True, help_text='Опубликовано или нет', verbose_name='Опубликовано')),
                ('iSort', models.IntegerField(default=0, help_text='Порядок вывода картинки в контенте', verbose_name='Порядок')),
                ('dtImageTimeStamp', models.DateTimeField(auto_now=True, verbose_name='Штамп времени')),
                ('flrImage', filer.fields.file.FilerFileField(blank=True, help_text='Картинка', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='IMG', to='filer.file', verbose_name='IMG')),
                ('kContentItem', models.ForeignKey(blank=True, help_text='Картинка привязана к контенту (к одной единице контента может быть привязано несколько картинок)', null=True, on_delete=django.db.models.deletion.SET_NULL, to='web.tbcontentitem', verbose_name='Link к контенту')),
                ('tags', taggit.managers.TaggableManager(blank=True, help_text="Теги через запятую… Регистр не чувствителен… Длинные теги, содержащие пробел, заключайте'в кавычки'… <b>Теги нужны для присвоения свойств объектам<b>.", through='web.RuTaggedItem', to='taggit.Tag', verbose_name='Теги')),
            ],
            options={
                'verbose_name': '[…Изображение]',
                'verbose_name_plural': '[…Изображения]',
                'ordering': ['id'],
            },
        ),
        migrations.AddField(
            model_name='tbcontentitem',
            name='tags',
            field=taggit.managers.TaggableManager(blank=True, help_text="Теги через запятую… Регистр не чувствителен… Длинные теги, содержащие пробел, заключайте'в кавычки'… <b>Теги нужны для присвоения свойств объектам<b>.", through='web.RuTaggedItem', to='taggit.Tag', verbose_name='Теги'),
        ),
    ]
